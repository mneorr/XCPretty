#!/usr/bin/env ruby

if RUBY_VERSION < '1.8.7'
  abort "error: XCPretty requires Ruby 1.8.7 or higher."
end

if $0 == __FILE__
  $:.unshift File.expand_path('../../lib', __FILE__)
end
require 'xcpretty'
require 'optparse'

report_formats = {
  "junit" => XCPretty::JUnit
}

OptionParser.new do |opts|
  @report_formats = []
  opts.banner = "Usage: xcodebuild [options] | xcpretty"
  opts.on('-t', '--test', 'Use RSpec style output') do
    @klass = XCPretty::Printer::RSpec
  end
  opts.on('-s', '--simple', 'Use simple output (default)') do
    @klass = XCPretty::Printer::Simple
  end
  opts.on('-p', '--printer PATH', 'Use printer returned from evaluating the specified Ruby file') do |path|
    $:.unshift File.dirname(path)
    source = File.read(path)
    @klass = eval(source, nil, path)
    unless @klass.is_a?(Class)
      $stderr.puts '[!] Expected printer source file to return a class.'
      exit 1
    end
  end
  opts.on('-c', '--color', 'Use colorized output') do
    @colorize = true
  end
  opts.on('--no-utf', 'Disable unicode characters in output') do
    @no_utf = true
  end
  opts.on("-r", "--report FORMAT", "Run FORMAT reporter",
                "  Choices: #{report_formats.keys.join(', ')}") do |format|
    @report_formats << report_formats[format]
  end
  opts.on_tail('-h', '--help', 'Show this message') { puts opts; exit }
  opts.on_tail("-v", "--version", "Show version") { puts XCPretty::VERSION; exit }

  if STDIN.tty?
    $stderr.puts opts.help
    exit 1
  else
    opts.parse!
  end
end

printer = (@klass || XCPretty::Printer::Simple).new
printer.colorize = @colorize
printer.use_unicode = !@no_utf

reporters = @report_formats.compact.map(&:new)

ARGF.each_line do |line|
  printer.pretty_print(line)
  reporters.each {|r| r.handle(line) }
end

reporters.each(&:finish)
